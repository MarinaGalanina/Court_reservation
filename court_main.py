# -*- coding: utf-8 -*-
"""Копия блокнота "Добро пожаловать в Colaboratory!"

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SprncjKztJ6ylUXWcX1Gsbd7LuhmPkYD
"""

import typing
import dataclasses
import datetime
import sqlite3 #library of SQLLite
import csv
import json

"""

Class Booking for booking slot. Definition of reservation data format

"""

@dataclasses.dataclass
class Booking:
  court : int
  slot : int
  name : str
  surname : str
  reservation_data : str
  
  
  def reservation_data(self, year, month, day, hour, minute):
    d = datetime.datetime(year, month, day, hour, minute)
    self.reservation_data = d.strftime("%Y-%m-%d %H:%M")

"""

Class for SQL operations

"""


class SQLiteDB:
    def __init__(self, db_name):
        self.db_name = db_name
        self.conn = sqlite3.connect(db_name)
        self.cursor = self.conn.cursor()

    def create_table(self, table_name, columns):
        self.conn = sqlite3.connect(self.db_name)
        query = f"CREATE TABLE IF NOT EXISTS {table_name} ({columns})"
        self.cursor.execute(query)
        self.conn.commit()
        self.closing()
    
    def insert_reservation(self, booking:Booking):
        self.conn = sqlite3.connect(self.db_name)
        self.cursor.execute('INSERT INTO reservations (court,slot,name,surname,date) VALUES (?, ?, ?, ?, ?)', (booking.court,booking.slot,booking.name,booking.surname,booking.reservation_data))
        self.conn.commit()
        self.closing()
    
    def closing(self):
        self.conn.close()
    
    def delete_reservation(self,name,surname,date):
        self.conn = sqlite3.connect(self.db_name)
        query = f"DELETE FROM reservations WHERE name = \"{name}\" AND surname = \"{surname}\" AND date = \"{date}\""
        self.cursor.execute(query)
        self.conn.commit()
        self.closing()

    def count_reservation(self,name,week_res,reservation_data):
        self.conn = sqlite3.connect(self.db_name)
        query = f"SELECT COUNT(*) FROM reservations WHERE name=? AND date BETWEEN ? AND ?"
        self.cursor.execute(query,(name, week_res,reservation_data))
        res_this_week = self.cursor.fetchone()[0]
        self.closing()
        return res_this_week
    
    def show_table(self):
        self.conn = sqlite3.connect(self.db_name)
        query = f"SELECT * FROM reservations"
        self.cursor.execute(query)
        print(self.cursor.fetchall())
        self.closing()

    def reservation_exists(self,name,surname,reservation_data) :
        self.conn = sqlite3.connect(self.db_name)
        query = f"SELECT * FROM reservations WHERE name=? AND surname=? AND date=?"
        self.cursor.execute(query,(name,surname,reservation_data))
        self.closing()
        return self.cursor.fetchone()

    def get_reservations_in_time(self,res_this_time,reservation_data):
        self.conn = sqlite3.connect(self.db_name)
        query = f"SELECT date FROM reservations WHERE date BETWEEN ? AND ?"
        self.cursor.execute(query,(res_this_time,reservation_data))
        output = self.cursor.fetchall()
        self.closing()
        return output

    def print_sheduel(self,start_date,end_date):
      self.conn = sqlite3.connect(self.db_name)
      query = f"SELECT name, date FROM reservations WHERE date BETWEEN ? AND ? ORDER BY date"
      self.cursor.execute(query,(start_date,end_date))
      return self.cursor.fetchall()

"""

Creating of db

"""

sql_api = SQLiteDB('reservations.db')
sql_api.create_table('reservations', 'court TEXT, slot TEXT, name TEXT, surname TEXT, date TEXT')

"""

Test input data for insert. 

"""

booking = Booking(1,30,"a","n","2024-04-05 14:00")
sql_api.insert_reservation(booking)
booking = Booking(1,30,"a","n","2024-04-06 15:00")
sql_api.insert_reservation(booking)
booking = Booking(1,30,"a","n","2024-04-05 14:30")
sql_api.insert_reservation(booking)
booking = Booking(1,30,"a","n","2024-04-05 15:00")
sql_api.insert_reservation(booking)
booking = Booking(1,30,"a","n","2024-04-05 15:30")
sql_api.insert_reservation(booking)
booking = Booking(1,30,"a","n","2024-04-05 16:00")
sql_api.insert_reservation(booking)
booking = Booking(1,30,"a","n","2024-04-05 15:40")
sql_api.insert_reservation(booking)
# sql_api.delete_reservation("a","n","abc")

"""

Test delete 

"""

sql_api.delete_reservation("a","n","2024-04-05 14:00")

"""

Show of SQL database

"""

sql_api.show_table()

"""

Globals

"""


MAX_RESERVATIONS = 2
HOURS_BOOKING = 1

"""

Check if not two reservations per week

"""


def two_res_check(booking):
  reservation_object = datetime.datetime.strptime(booking.reservation_data, '%Y-%m-%d %H:%M')
  week_res = reservation_object - datetime.timedelta(days=7)
  
  res_this_week = sql_api.count_reservation(booking.name,week_res,booking.reservation_data)

  if res_this_week >= MAX_RESERVATIONS:
    print("Sorry limit of reservations for this week")
    return False
  return True

"""

Checking if booking in advance

"""


def checking_of_data(booking):
  reservation_object = datetime.datetime.strptime(booking.reservation_data, '%Y-%m-%d %H:%M')
  if reservation_object < datetime.datetime.now() + datetime.timedelta(hours=HOURS_BOOKING):
    print("Sorry, you should book slot at least one hour in advance")
    return False

  return True

"""

Check court availabilty. Unfortunately not in future, because of lack o time :(


"""


def court_av(booking):
  reservation_object = datetime.datetime.strptime(booking.reservation_data, '%Y-%m-%d %H:%M')
  res_this_time = reservation_object + datetime.timedelta(hours=1, minutes=30)
  time_data = sql_api.get_reservations_in_time(res_this_time, booking.reservation_data)
  if len(time_data)==0:
    return 3
  nearest_reservation = min(time_data,key=lambda x:datetime.datetime.strptime(x[0], '%Y-%m-%d %H:%M')-reservation_object)
  free_time = datetime.datetime.strptime(nearest_reservation[0],'%Y-%m-%d %H:%M') -reservation_object
  minutes = int(free_time.total_seconds()/60)
  if minutes < 30:
    return 0
  if minutes < 60:
    return 1
  else:
    return 2

"""

If reservation exists

"""


def reservation_exists(booking):
  return sql_api.reservation_exists(booking.name, booking.surname, booking.reservation_data) is not None

"""

Print schedule

"""


def print_schedule(start_date, end_date):
  reservations = sql_api.print_sheduel(start_date, end_date)
  if not reservations:
    print("No reservation for such data")
  else:
    for reservation in reservations:
      print([reservations[2], reservations[3],reservations[4]])

"""

Not finished. Printing function 

"""


def save_schedule(start_date, end_date, file_format, file_name):
  reservations = sql_api.print_sheduel(start_date, end_date)
  if file_format == "csv":
    with open(file_name, mode='w', newline='') as file:
      writer = csv.writer(file)
      writer.writerow(["Name", "Surname", "Date" ])
      for reservation in reservations:
                writer.writerow([reservation[2], reservation[3], reservation[4]])
  elif file_format == "json":
    res_list = []
    for reservation in reservations:
      reservation_dict = {
                "name": reservation[2],
                "surname": reservation[3],
                "date": reservation[4]
            }
      res_list.append(reservation_dict)

"""

Main function for booking

"""


def Home():
  while(True):

    print("\n\t\t\t\t\t\t WELCOME TO COURT BOOKING\n")
    print("\t\t\t 1 Booking\n")
    print("\t\t\t 2 Reservation information\n")
    print("\t\t\t 3 Cancelling reservation\n")
    print("\t\t\t 4 Exit\n")
    ch=int(input("->"))

    if ch == 1:
      print("Court booking")
      court = int(input("Write court: "))
      name = str(input("Write name: "))
      surname = str(input("Write surname: "))
      reservation_data = str(input("Write the reservation date and time in format YYYY-MM-DD HH:MM"))
      booking = Booking(court,0,name,surname,reservation_data)
      max_time = court_av(booking)
      print("How long would you like to book court?")
      
      if max_time == 0:
        print("No booking available!")
      elif max_time == 1:
        print("1)30 Minutes")
      elif max_time == 2:
        print("1)30 Minutes")
        print("2)60 Minutes")
      else:
        print("1)30 Minutes")
        print("2)60 Minutes")
        print("3)90 Minutes")

      slot = int(input())
      if slot > max_time:
        print("Incorrect timeslot!")
        continue
      if slot == 1:
        slot = 0.5
      elif slot == 2:
        slot = 1
      elif slot == 3:
        slot = 1.5
      else:
        print("Unsupported input")
        continue
  
      booking = Booking(court,slot,name,surname,reservation_data)

      if checking_of_data(booking) and two_res_check(booking):
        sql_api.insert_reservation(booking)
      else:
        print("Unfortunately,reservation is invalid ")

      
    elif ch == 2:
      print("Shedule")
      start_date = str(input("Write the start date and time in format YYYY-MM-DD HH:MM: "))
      end_date = str(input("Write the end date and time in format YYYY-MM-DD HH:MM: "))
      print_schedule(start_date, end_date)
    
    elif ch == 3:
      print("Cancellation of reservation")
      name = str(input("Write name: "))
      surname = str(input("Write surname: "))
      reservation_data = str(input("Write the reservation date and time in format YYYY-MM-DD HH:MM"))
      booking = Booking(0,0,name,surname,reservation_data)
      if reservation_exists(booking) and checking_of_data(booking):
        sql_api.delete_reservation(name,surname,reservation_data)
        print("Deleted successfully")
      else:
        print("This booking doesn't exist")
    elif ch == 4:
      break  
    else:
      print("Unknown")

Home()

